#!/bin/bash

# Setup the ssl_cert directory
if [ ! -d /etc/squid4/ssl_cert ]; then
    mkdir /etc/squid4/ssl_cert
fi

chown -R proxy:proxy /etc/squid4
chmod 700 /etc/squid4/ssl_cert

# Setup the squid cache directory
if [ ! -d /var/cache/squid4 ]; then
    mkdir -p /var/cache/squid4
fi
chown -R proxy: /var/cache/squid4
chmod -R 750 /var/cache/squid4

chown proxy: /dev/stdout
chown proxy: /dev/stderr

# Initialize the certificates database
/usr/libexec/security_file_certgen -c -s /var/spool/squid4/ssl_db -M 64MB
chown -R proxy: /var/spool/squid4/ssl_db

#ssl_crtd -c -s
#ssl_db

# Set the configuration
if [ "$CONFIG_DISABLE" != "true" ]; then
    p2 -t /squid.conf.p2 > /etc/squid4/squid.conf
    p2 -t /radius_auth.conf.p2 > /etc/squid4/radius_auth.conf
    
    # Parse the extra config lines and append them to the configuration
    echo '# EXTRA CONFIG FROM DOCKER' >> /etc/squid4/squid.conf
    env | grep 'EXTRA_CONFIG' | sort | while read extraline; do
        echo "# $extraline " >> /etc/squid4/squid.conf
        line=$(echo $extraline | cut -d'=' -f2-)
        echo "$line" >> /etc/squid4/squid.conf
    done
else
    echo "/etc/squid4/squid.conf: CONFIGURATION TEMPLATING IS DISABLED."
fi

if [ "$DNS_OVER_HTTPS" = "true" ]; then
    echo "Starting DNS-over-HTTPS proxy..."
    # TODO: find a way to tie this to the proxychains config
    dns-over-https-proxy -default "$DNS_OVER_HTTPS_SERVER" \
        -address "$DNS_OVER_HTTPS_LISTEN_ADDR" \
        -primary-dns "$DNS_OVER_HTTPS_PREFIX_SERVER" \
        -fallback-dns "$DNS_OVER_HTTPS_SUFFIX_SERVER" \
        -no-fallthrough "$(echo $DNS_OVER_HTTPS_NO_FALLTHROUGH | tr -s ' ' ',')" \
        -fallthrough-statuses "$DNS_OVER_HTTPS_FALLTHROUGH_STATUSES" &
    echo "Adding dns_nameservers line to squid.conf..."
    echo "dns_nameservers $(echo $DNS_OVER_HTTPS_LISTEN_ADDR | cut -d':' -f1)" >> /etc/squid4/squid.conf
fi

if [ ! -e /etc/squid4/squid.conf ]; then
    echo "ERROR: /etc/squid4/squid.conf does not exist. Squid will not work."
    exit 1
fi

if [ "$RUN_CERTBOT" = "true" ]; then
  # Run Certbot
  certbot --standalone --preferred-challenges http --http-01-port 5555 --deploy-hook '/usr/sbin/squid -k reconfigure' --d $HOSTNAME
fi

# Build the configuration directories if needed
squid -z -N


# Start squid normally
squid -NYCd 1 2>&1 &

if [ "$RUN_CERTBOT" = "true" ]; then
  while sleep 12h; do
    echo "Running Certbot"
    certbot --standalone --preferred-challenges http --http-01-port 5555 --deploy-hook '/usr/sbin/squid -k reconfigure' --d $HOSTNAME
  done
else
  PID=$!
  # This construct allows signals to kill the container successfully.
  trap "kill -TERM $(jobs -p)" INT TERM
  wait $PID
  wait $PID
  exit $?
fi